// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: employee.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPersonnel = `-- name: CountPersonnel :one
SELECT
	COUNT(DISTINCT e.id)
FROM
	employees AS e
JOIN
	employee_details AS ed ON e.id = ed.employee_id
JOIN
	employee_degrees AS edeg ON e.id = edeg.employee_id
JOIN
	employee_work_experiences AS ewe ON e.id = ewe.employee_id
WHERE
	($1::text IS NULL OR e.unique_id ILIKE '%' || $1 || '%')
	AND ed.language_code = $2
	AND ed.is_employee_details_new = True
	AND ($3::text IS NULL OR ed.name ILIKE '%' || $3 || '%')
	AND ($4::text IS NULL OR ed.surname ILIKE '%' || $4 || '%')
	AND ($5::text IS NULL OR ed.middlename ILIKE '%' || $5 || '%')
	AND edeg.language_code = $2
	AND ($6::text IS NULL OR edeg.speciality ILIKE '%' || $6 || '%')
	AND ewe.language_code = $2
`

type CountPersonnelParams struct {
	Uid          pgtype.Text `json:"uid"`
	LanguageCode string      `json:"language_code"`
	Name         pgtype.Text `json:"name"`
	Surname      pgtype.Text `json:"surname"`
	Middlename   pgtype.Text `json:"middlename"`
	Speciality   pgtype.Text `json:"speciality"`
}

func (q *Queries) CountPersonnel(ctx context.Context, arg CountPersonnelParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPersonnel,
		arg.Uid,
		arg.LanguageCode,
		arg.Name,
		arg.Surname,
		arg.Middlename,
		arg.Speciality,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
  unique_id,
  user_id,
  gender,
  tin
) VALUES(
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeeParams struct {
	UniqueID string      `json:"unique_id"`
	UserID   pgtype.Int8 `json:"user_id"`
	Gender   pgtype.Text `json:"gender"`
	Tin      pgtype.Text `json:"tin"`
}

type CreateEmployeeRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (CreateEmployeeRow, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.UniqueID,
		arg.UserID,
		arg.Gender,
		arg.Tin,
	)
	var i CreateEmployeeRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees 
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id, unique_id, created_at, updated_at, user_id, gender, tin
FROM employees
WHERE id = $1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Gender,
		&i.Tin,
	)
	return i, err
}

const getEmployeeByUniqueIdentifier = `-- name: GetEmployeeByUniqueIdentifier :one
SELECT id, unique_id, created_at, updated_at, user_id, gender, tin
FROM employees
WHERE unique_id = $1
`

func (q *Queries) GetEmployeeByUniqueIdentifier(ctx context.Context, uniqueID string) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByUniqueIdentifier, uniqueID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Gender,
		&i.Tin,
	)
	return i, err
}

const getEmployeeByUserID = `-- name: GetEmployeeByUserID :one
SELECT id, unique_id, created_at, updated_at, user_id, gender, tin 
FROM employees
WHERE user_id = $1
`

func (q *Queries) GetEmployeeByUserID(ctx context.Context, userID pgtype.Int8) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByUserID, userID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Gender,
		&i.Tin,
	)
	return i, err
}

const getPersonnelPaginated = `-- name: GetPersonnelPaginated :many
SELECT
	e.id,
	e.unique_id
FROM
	employees AS e
JOIN
	employee_details AS ed ON e.id = ed.employee_id
JOIN
	employee_degrees AS edeg ON e.id = edeg.employee_id
JOIN
	employee_work_experiences AS ewe ON e.id = ewe.employee_id
WHERE
	($1::text IS NULL OR e.unique_id ILIKE '%' || $1 || '%')
	AND ed.language_code = $2
	AND ed.is_employee_details_new = True
	AND ($3::text IS NULL OR ed.name ILIKE '%' || $3 || '%')
	AND ($4::text IS NULL OR ed.surname ILIKE '%' || $4 || '%')
	AND ($5::text IS NULL OR ed.middlename ILIKE '%' || $5 || '%')
	AND edeg.language_code = $2
	AND ($6::text IS NULL OR edeg.speciality ILIKE '%' || $6 || '%')
	AND ewe.language_code = $2
GROUP BY
	e.id,
	e.unique_id
ORDER BY
	e.id,
	e.unique_id
LIMIT $8
OFFSET $7
`

type GetPersonnelPaginatedParams struct {
	Uid          pgtype.Text `json:"uid"`
	LanguageCode string      `json:"language_code"`
	Name         pgtype.Text `json:"name"`
	Surname      pgtype.Text `json:"surname"`
	Middlename   pgtype.Text `json:"middlename"`
	Speciality   pgtype.Text `json:"speciality"`
	Page         int32       `json:"page"`
	Limit        int32       `json:"limit"`
}

type GetPersonnelPaginatedRow struct {
	ID       int64  `json:"id"`
	UniqueID string `json:"unique_id"`
}

func (q *Queries) GetPersonnelPaginated(ctx context.Context, arg GetPersonnelPaginatedParams) ([]GetPersonnelPaginatedRow, error) {
	rows, err := q.db.Query(ctx, getPersonnelPaginated,
		arg.Uid,
		arg.LanguageCode,
		arg.Name,
		arg.Surname,
		arg.Middlename,
		arg.Speciality,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPersonnelPaginatedRow{}
	for rows.Next() {
		var i GetPersonnelPaginatedRow
		if err := rows.Scan(&i.ID, &i.UniqueID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
