// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
  unique_id
) VALUES(
  $1  
) RETURNING id, created_at, updated_at
`

type CreateEmployeeRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployee(ctx context.Context, uniqueID string) (CreateEmployeeRow, error) {
	row := q.db.QueryRow(ctx, createEmployee, uniqueID)
	var i CreateEmployeeRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees 
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id, unique_id, created_at, updated_at
FROM employees
WHERE id = $1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeByUniqueIdentifier = `-- name: GetEmployeeByUniqueIdentifier :one
SELECT id, unique_id, created_at, updated_at
FROM employees
WHERE unique_id = $1
`

func (q *Queries) GetEmployeeByUniqueIdentifier(ctx context.Context, uniqueID string) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByUniqueIdentifier, uniqueID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPersonnelPaginated = `-- name: GetPersonnelPaginated :many
SELECT DISTINCT employees.id
FROM employees
INNER JOIN employee_details on employee_details.employee_id = employees.id
INNER JOIN employee_degrees on employee_degrees.employee_id = employees.id
INNER JOIN employee_work_experiences on employee_work_experiences.employee_id = employees.id
WHERE 
  -- MANDATORY FILTERS
  employee_details.language_code = $1
  AND employee_degrees.language_code = $1
  AND employee_work_experiences.language_code = $1
  -- OPTIONAL FILTERS
  AND ($2::text IS NULL OR employees.uid = $2)
  AND ($3::text IS NULL OR employee_details.name = $3)
  AND ($4::text IS NULL OR employee_details.surname = $4)
  AND ($5::text IS NULL OR employee_details.middlename = $2)
  AND ($6::text IS NULL OR employees_degrees.speciality = $6)
ORDER BY 
  employees.id ASC
LIMIT $8
OFFSET $7
`

type GetPersonnelPaginatedParams struct {
	LanguageCode string      `json:"language_code"`
	Uid          pgtype.Text `json:"uid"`
	Name         pgtype.Text `json:"name"`
	Surname      pgtype.Text `json:"surname"`
	Middlename   pgtype.Text `json:"middlename"`
	Speciality   pgtype.Text `json:"speciality"`
	Page         int32       `json:"page"`
	Limit        int32       `json:"limit"`
}

func (q *Queries) GetPersonnelPaginated(ctx context.Context, arg GetPersonnelPaginatedParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getPersonnelPaginated,
		arg.LanguageCode,
		arg.Uid,
		arg.Name,
		arg.Surname,
		arg.Middlename,
		arg.Speciality,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
