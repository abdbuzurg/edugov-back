// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: employee_work_experience.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeWorkExperience = `-- name: CreateEmployeeWorkExperience :one
INSERT INTO employee_work_experiences(
  employee_id,
  language_code,
  workplace,
  job_title,
  description,
  date_start,
  date_end,
  on_going
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, created_at, updated_at
`

type CreateEmployeeWorkExperienceParams struct {
	EmployeeID   int64       `json:"employee_id"`
	LanguageCode string      `json:"language_code"`
	Workplace    string      `json:"workplace"`
	JobTitle     string      `json:"job_title"`
	Description  string      `json:"description"`
	DateStart    pgtype.Date `json:"date_start"`
	DateEnd      pgtype.Date `json:"date_end"`
	OnGoing      bool        `json:"on_going"`
}

type CreateEmployeeWorkExperienceRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeWorkExperience(ctx context.Context, arg CreateEmployeeWorkExperienceParams) (CreateEmployeeWorkExperienceRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeWorkExperience,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.Workplace,
		arg.JobTitle,
		arg.Description,
		arg.DateStart,
		arg.DateEnd,
		arg.OnGoing,
	)
	var i CreateEmployeeWorkExperienceRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeWorkExperience = `-- name: DeleteEmployeeWorkExperience :exec
DELETE FROM employee_work_experiences
WHERE id = $1
`

func (q *Queries) DeleteEmployeeWorkExperience(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeWorkExperience, id)
	return err
}

const getEmployeeWorkExperienceByID = `-- name: GetEmployeeWorkExperienceByID :one
SELECT id, employee_id, language_code, workplace, job_title, description, date_start, date_end, created_at, updated_at, on_going
FROM employee_work_experiences
WHERE id = $1
`

func (q *Queries) GetEmployeeWorkExperienceByID(ctx context.Context, id int64) (EmployeeWorkExperience, error) {
	row := q.db.QueryRow(ctx, getEmployeeWorkExperienceByID, id)
	var i EmployeeWorkExperience
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.Workplace,
		&i.JobTitle,
		&i.Description,
		&i.DateStart,
		&i.DateEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OnGoing,
	)
	return i, err
}

const getEmployeeWorkExperiencesByEmployeeIDAndLanguageCode = `-- name: GetEmployeeWorkExperiencesByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, workplace, job_title, description, date_start, date_end, created_at, updated_at, on_going
FROM employee_work_experiences
WHERE employee_id = $1 AND language_code = $2
ORDER BY employee_work_experiences.on_going DESC, employee_work_experiences.date_end DESC
`

type GetEmployeeWorkExperiencesByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeeWorkExperiencesByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeeWorkExperiencesByEmployeeIDAndLanguageCodeParams) ([]EmployeeWorkExperience, error) {
	rows, err := q.db.Query(ctx, getEmployeeWorkExperiencesByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeWorkExperience{}
	for rows.Next() {
		var i EmployeeWorkExperience
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.Workplace,
			&i.JobTitle,
			&i.Description,
			&i.DateStart,
			&i.DateEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OnGoing,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeWorkExperience = `-- name: UpdateEmployeeWorkExperience :one
UPDATE employee_work_experiences
SET 
  workplace = COALESCE($1, workplace),
  job_title = COALESCE($2, job_title),
  description = COALESCE($3, description),
  date_start = COALESCE($4, date_start),
  date_end = COALESCE($5, date_end),
  on_going = COALESCE($6, on_going),
  updated_at = now()
WHERE id = $7
RETURNING id, created_at, updated_at
`

type UpdateEmployeeWorkExperienceParams struct {
	Workplace   string      `json:"workplace"`
	JobTitle    string      `json:"job_title"`
	Description string      `json:"description"`
	DateStart   pgtype.Date `json:"date_start"`
	DateEnd     pgtype.Date `json:"date_end"`
	OnGoing     bool        `json:"on_going"`
	ID          int64       `json:"id"`
}

type UpdateEmployeeWorkExperienceRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeWorkExperience(ctx context.Context, arg UpdateEmployeeWorkExperienceParams) (UpdateEmployeeWorkExperienceRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeWorkExperience,
		arg.Workplace,
		arg.JobTitle,
		arg.Description,
		arg.DateStart,
		arg.DateEnd,
		arg.OnGoing,
		arg.ID,
	)
	var i UpdateEmployeeWorkExperienceRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
