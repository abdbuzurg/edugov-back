// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_patent.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeePatent = `-- name: CreateEmployeePatent :one
INSERT INTO employee_patents(
  employee_id,
  language_code,
  patent_title,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeePatentParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
	PatentTitle  string `json:"patent_title"`
	Description  string `json:"description"`
}

type CreateEmployeePatentRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeePatent(ctx context.Context, arg CreateEmployeePatentParams) (CreateEmployeePatentRow, error) {
	row := q.db.QueryRow(ctx, createEmployeePatent,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.PatentTitle,
		arg.Description,
	)
	var i CreateEmployeePatentRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeePatent = `-- name: DeleteEmployeePatent :exec
DELETE FROM employee_patents
WHERE id = $1
`

func (q *Queries) DeleteEmployeePatent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeePatent, id)
	return err
}

const getEmployeePatentByID = `-- name: GetEmployeePatentByID :one
SELECT id, employee_id, language_code, patent_title, description, created_at, updated_at
FROM employee_patents
WHERE id = $1
`

func (q *Queries) GetEmployeePatentByID(ctx context.Context, id int64) (EmployeePatent, error) {
	row := q.db.QueryRow(ctx, getEmployeePatentByID, id)
	var i EmployeePatent
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.PatentTitle,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeePatentsByEmployeeIDAndLanguageCode = `-- name: GetEmployeePatentsByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, patent_title, description, created_at, updated_at
FROM employee_patents
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeePatentsByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeePatentsByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeePatentsByEmployeeIDAndLanguageCodeParams) ([]EmployeePatent, error) {
	rows, err := q.db.Query(ctx, getEmployeePatentsByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeePatent{}
	for rows.Next() {
		var i EmployeePatent
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.PatentTitle,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeePatent = `-- name: UpdateEmployeePatent :one
UPDATE employee_patents 
SET 
  patent_title = COALESCE($1, patent_title),
  description = COALESCE($2, description),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeePatentParams struct {
	PatentTitle string `json:"patent_title"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

type UpdateEmployeePatentRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeePatent(ctx context.Context, arg UpdateEmployeePatentParams) (UpdateEmployeePatentRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeePatent, arg.PatentTitle, arg.Description, arg.ID)
	var i UpdateEmployeePatentRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
