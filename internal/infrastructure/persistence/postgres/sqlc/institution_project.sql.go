// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution_project.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionProject = `-- name: CreateInstitutionProject :one
INSERT INTO institution_projects(
  institution_id,
  language_code,
  project_type,
  project_title,
  date_start,
  date_end,
  fund,
  institution_role,
  coordinator
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, created_at, updated_at
`

type CreateInstitutionProjectParams struct {
	InstitutionID   int64       `json:"institution_id"`
	LanguageCode    string      `json:"language_code"`
	ProjectType     string      `json:"project_type"`
	ProjectTitle    string      `json:"project_title"`
	DateStart       pgtype.Date `json:"date_start"`
	DateEnd         pgtype.Date `json:"date_end"`
	Fund            float64     `json:"fund"`
	InstitutionRole string      `json:"institution_role"`
	Coordinator     string      `json:"coordinator"`
}

type CreateInstitutionProjectRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionProject(ctx context.Context, arg CreateInstitutionProjectParams) (CreateInstitutionProjectRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionProject,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.ProjectType,
		arg.ProjectTitle,
		arg.DateStart,
		arg.DateEnd,
		arg.Fund,
		arg.InstitutionRole,
		arg.Coordinator,
	)
	var i CreateInstitutionProjectRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionProject = `-- name: DeleteInstitutionProject :exec
DELETE FROM institution_projects
WHERE id = $1
`

func (q *Queries) DeleteInstitutionProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionProject, id)
	return err
}

const getInstitutionProjectByID = `-- name: GetInstitutionProjectByID :one
SELECT id, institution_id, language_code, project_type, project_title, date_start, date_end, fund, institution_role, coordinator, created_at, updated_at
FROM institution_projects
WHERE id = $1
`

func (q *Queries) GetInstitutionProjectByID(ctx context.Context, id int64) (InstitutionProject, error) {
	row := q.db.QueryRow(ctx, getInstitutionProjectByID, id)
	var i InstitutionProject
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.ProjectType,
		&i.ProjectTitle,
		&i.DateStart,
		&i.DateEnd,
		&i.Fund,
		&i.InstitutionRole,
		&i.Coordinator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionProjectsByInstitutionIDAndLanguageCode = `-- name: GetInstitutionProjectsByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, project_type, project_title, date_start, date_end, fund, institution_role, coordinator, created_at, updated_at
FROM institution_projects
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionProjectsByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionProjectsByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionProjectsByInstitutionIDAndLanguageCodeParams) ([]InstitutionProject, error) {
	rows, err := q.db.Query(ctx, getInstitutionProjectsByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionProject{}
	for rows.Next() {
		var i InstitutionProject
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.ProjectType,
			&i.ProjectTitle,
			&i.DateStart,
			&i.DateEnd,
			&i.Fund,
			&i.InstitutionRole,
			&i.Coordinator,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionProject = `-- name: UpdateInstitutionProject :one
UPDATE institution_projects
SET
  project_type = COALESCE($1, project_type),
  project_title = COALESCE($2, project_title),
  date_start = COALESCE($3, date_start),
  date_end = COALESCE($4, date_end),
  fund = COALESCE($5, fund),
  institution_role = COALESCE($6, institution_role),
  coordinator = COALESCE($7, coordinator),
  updated_at = now()
WHERE id = $8
RETURNING id, created_at, updated_at
`

type UpdateInstitutionProjectParams struct {
	ProjectType     string      `json:"project_type"`
	ProjectTitle    string      `json:"project_title"`
	DateStart       pgtype.Date `json:"date_start"`
	DateEnd         pgtype.Date `json:"date_end"`
	Fund            float64     `json:"fund"`
	InstitutionRole string      `json:"institution_role"`
	Coordinator     string      `json:"coordinator"`
	ID              int64       `json:"id"`
}

type UpdateInstitutionProjectRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionProject(ctx context.Context, arg UpdateInstitutionProjectParams) (UpdateInstitutionProjectRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionProject,
		arg.ProjectType,
		arg.ProjectTitle,
		arg.DateStart,
		arg.DateEnd,
		arg.Fund,
		arg.InstitutionRole,
		arg.Coordinator,
		arg.ID,
	)
	var i UpdateInstitutionProjectRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
