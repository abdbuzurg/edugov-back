// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: institution_ranking.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionRanking = `-- name: CreateInstitutionRanking :one
INSERT INTO institution_rankings(
  institution_id,
  language_code,
  ranking_title,
  ranking_type,
  date_recieved,
  ranking_agency,
  link_to_ranking_file,
  description,
  link_to_ranking_agency
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, created_at, updated_at
`

type CreateInstitutionRankingParams struct {
	InstitutionID       int64       `json:"institution_id"`
	LanguageCode        string      `json:"language_code"`
	RankingTitle        string      `json:"ranking_title"`
	RankingType         string      `json:"ranking_type"`
	DateRecieved        pgtype.Date `json:"date_recieved"`
	RankingAgency       string      `json:"ranking_agency"`
	LinkToRankingFile   string      `json:"link_to_ranking_file"`
	Description         pgtype.Text `json:"description"`
	LinkToRankingAgency string      `json:"link_to_ranking_agency"`
}

type CreateInstitutionRankingRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionRanking(ctx context.Context, arg CreateInstitutionRankingParams) (CreateInstitutionRankingRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionRanking,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.RankingTitle,
		arg.RankingType,
		arg.DateRecieved,
		arg.RankingAgency,
		arg.LinkToRankingFile,
		arg.Description,
		arg.LinkToRankingAgency,
	)
	var i CreateInstitutionRankingRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionRanking = `-- name: DeleteInstitutionRanking :exec
DELETE FROM institution_rankings
WHERE id = $1
`

func (q *Queries) DeleteInstitutionRanking(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionRanking, id)
	return err
}

const getInstitutionRankingByID = `-- name: GetInstitutionRankingByID :one
SELECT id, institution_id, language_code, ranking_title, ranking_type, date_recieved, ranking_agency, link_to_ranking_file, description, link_to_ranking_agency, created_at, updated_at
FROM institution_rankings
WHERE id = $1
`

func (q *Queries) GetInstitutionRankingByID(ctx context.Context, id int64) (InstitutionRanking, error) {
	row := q.db.QueryRow(ctx, getInstitutionRankingByID, id)
	var i InstitutionRanking
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.RankingTitle,
		&i.RankingType,
		&i.DateRecieved,
		&i.RankingAgency,
		&i.LinkToRankingFile,
		&i.Description,
		&i.LinkToRankingAgency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionRankingsByInstitutionIDAndLanguageCode = `-- name: GetInstitutionRankingsByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, ranking_title, ranking_type, date_recieved, ranking_agency, link_to_ranking_file, description, link_to_ranking_agency, created_at, updated_at
FROM institution_rankings
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionRankingsByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionRankingsByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionRankingsByInstitutionIDAndLanguageCodeParams) ([]InstitutionRanking, error) {
	rows, err := q.db.Query(ctx, getInstitutionRankingsByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionRanking{}
	for rows.Next() {
		var i InstitutionRanking
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.RankingTitle,
			&i.RankingType,
			&i.DateRecieved,
			&i.RankingAgency,
			&i.LinkToRankingFile,
			&i.Description,
			&i.LinkToRankingAgency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionRanking = `-- name: UpdateInstitutionRanking :one
UPDATE institution_rankings
SET
  ranking_title = COALESCE($1, ranking_title),
  ranking_type = COALESCE($2, ranking_type),
  date_recieved = COALESCE($3, date_recieved),
  ranking_agency = COALESCE($4, ranking_agency),
  link_to_ranking_file = COALESCE($5, link_to_ranking_file),
  description = COALESCE($6, description),
  link_to_ranking_agency = COALESCE($7, link_to_ranking_agency),
  updated_at = now()
WHERE id = $8
RETURNING id, created_at, updated_at
`

type UpdateInstitutionRankingParams struct {
	RankingTitle        string      `json:"ranking_title"`
	RankingType         string      `json:"ranking_type"`
	DateRecieved        pgtype.Date `json:"date_recieved"`
	RankingAgency       string      `json:"ranking_agency"`
	LinkToRankingFile   string      `json:"link_to_ranking_file"`
	Description         pgtype.Text `json:"description"`
	LinkToRankingAgency string      `json:"link_to_ranking_agency"`
	ID                  int64       `json:"id"`
}

type UpdateInstitutionRankingRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionRanking(ctx context.Context, arg UpdateInstitutionRankingParams) (UpdateInstitutionRankingRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionRanking,
		arg.RankingTitle,
		arg.RankingType,
		arg.DateRecieved,
		arg.RankingAgency,
		arg.LinkToRankingFile,
		arg.Description,
		arg.LinkToRankingAgency,
		arg.ID,
	)
	var i UpdateInstitutionRankingRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
