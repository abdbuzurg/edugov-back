// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_research_activity.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeResearchActivity = `-- name: CreateEmployeeResearchActivity :one
INSERT INTO employee_research_activities(
  employee_id,
  language_code,
  research_activity_title,
  employee_role
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeeResearchActivityParams struct {
	EmployeeID            int64  `json:"employee_id"`
	LanguageCode          string `json:"language_code"`
	ResearchActivityTitle string `json:"research_activity_title"`
	EmployeeRole          string `json:"employee_role"`
}

type CreateEmployeeResearchActivityRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeResearchActivity(ctx context.Context, arg CreateEmployeeResearchActivityParams) (CreateEmployeeResearchActivityRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeResearchActivity,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.ResearchActivityTitle,
		arg.EmployeeRole,
	)
	var i CreateEmployeeResearchActivityRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeResearchActivity = `-- name: DeleteEmployeeResearchActivity :exec
DELETE FROM employee_research_activities
WHERE id = $1
`

func (q *Queries) DeleteEmployeeResearchActivity(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeResearchActivity, id)
	return err
}

const getEmployeeResearchActivitiesByEmployeeIDAndLanguageCode = `-- name: GetEmployeeResearchActivitiesByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, research_activity_title, employee_role, created_at, updated_at
FROM employee_research_activities
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeeResearchActivitiesByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeeResearchActivitiesByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeeResearchActivitiesByEmployeeIDAndLanguageCodeParams) ([]EmployeeResearchActivity, error) {
	rows, err := q.db.Query(ctx, getEmployeeResearchActivitiesByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeResearchActivity{}
	for rows.Next() {
		var i EmployeeResearchActivity
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.ResearchActivityTitle,
			&i.EmployeeRole,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeResearchActivityByID = `-- name: GetEmployeeResearchActivityByID :one
SELECT id, employee_id, language_code, research_activity_title, employee_role, created_at, updated_at
FROM employee_research_activities
WHERE id = $1
`

func (q *Queries) GetEmployeeResearchActivityByID(ctx context.Context, id int64) (EmployeeResearchActivity, error) {
	row := q.db.QueryRow(ctx, getEmployeeResearchActivityByID, id)
	var i EmployeeResearchActivity
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.ResearchActivityTitle,
		&i.EmployeeRole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmployeeResearchActivity = `-- name: UpdateEmployeeResearchActivity :one
UPDATE employee_research_activities 
SET 
  research_activity_title = COALESCE($1, research_activity_title),
  employee_role = COALESCE($2, employee_role),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeeResearchActivityParams struct {
	ResearchActivityTitle string `json:"research_activity_title"`
	EmployeeRole          string `json:"employee_role"`
	ID                    int64  `json:"id"`
}

type UpdateEmployeeResearchActivityRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeResearchActivity(ctx context.Context, arg UpdateEmployeeResearchActivityParams) (UpdateEmployeeResearchActivityRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeResearchActivity, arg.ResearchActivityTitle, arg.EmployeeRole, arg.ID)
	var i UpdateEmployeeResearchActivityRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
