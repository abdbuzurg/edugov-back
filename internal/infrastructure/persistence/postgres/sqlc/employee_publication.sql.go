// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: employee_publication.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeePublication = `-- name: CreateEmployeePublication :one
INSERT INTO employee_publications(
  employee_id,
  language_code,
  publication_title,
  link_to_publication
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeePublicationParams struct {
	EmployeeID        int64  `json:"employee_id"`
	LanguageCode      string `json:"language_code"`
	PublicationTitle  string `json:"publication_title"`
	LinkToPublication string `json:"link_to_publication"`
}

type CreateEmployeePublicationRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeePublication(ctx context.Context, arg CreateEmployeePublicationParams) (CreateEmployeePublicationRow, error) {
	row := q.db.QueryRow(ctx, createEmployeePublication,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.PublicationTitle,
		arg.LinkToPublication,
	)
	var i CreateEmployeePublicationRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeePublication = `-- name: DeleteEmployeePublication :exec
DELETE FROM employee_publications
WHERE id = $1
`

func (q *Queries) DeleteEmployeePublication(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeePublication, id)
	return err
}

const getEmployeePublicationByID = `-- name: GetEmployeePublicationByID :one
SELECT id, employee_id, language_code, publication_title, link_to_publication, created_at, updated_at
FROM employee_publications
WHERE id = $1
`

func (q *Queries) GetEmployeePublicationByID(ctx context.Context, id int64) (EmployeePublication, error) {
	row := q.db.QueryRow(ctx, getEmployeePublicationByID, id)
	var i EmployeePublication
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.PublicationTitle,
		&i.LinkToPublication,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeePublicationsByEmployeeIDAndLanguageCode = `-- name: GetEmployeePublicationsByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, publication_title, link_to_publication, created_at, updated_at
FROM employee_publications
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeePublicationsByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeePublicationsByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeePublicationsByEmployeeIDAndLanguageCodeParams) ([]EmployeePublication, error) {
	rows, err := q.db.Query(ctx, getEmployeePublicationsByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeePublication{}
	for rows.Next() {
		var i EmployeePublication
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.PublicationTitle,
			&i.LinkToPublication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeePublication = `-- name: UpdateEmployeePublication :one
UPDATE employee_publications 
SET 
  publication_title = COALESCE($1, publication_title),
  link_to_publication = COALESCE($2, link_to_publication),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeePublicationParams struct {
	PublicationTitle  string `json:"publication_title"`
	LinkToPublication string `json:"link_to_publication"`
	ID                int64  `json:"id"`
}

type UpdateEmployeePublicationRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeePublication(ctx context.Context, arg UpdateEmployeePublicationParams) (UpdateEmployeePublicationRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeePublication, arg.PublicationTitle, arg.LinkToPublication, arg.ID)
	var i UpdateEmployeePublicationRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
