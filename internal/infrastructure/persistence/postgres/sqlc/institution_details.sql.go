// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution_details.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionDetails = `-- name: CreateInstitutionDetails :one
INSERT INTO institution_details(
  institution_id,
  language_code,
  institution_type,
  institution_title,
  legal_status,
  mission,
  founder,
  legal_address,
  factual_address
  )
VALUES (
 $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, created_at, updated_at
`

type CreateInstitutionDetailsParams struct {
	InstitutionID    int64       `json:"institution_id"`
	LanguageCode     string      `json:"language_code"`
	InstitutionType  string      `json:"institution_type"`
	InstitutionTitle string      `json:"institution_title"`
	LegalStatus      string      `json:"legal_status"`
	Mission          string      `json:"mission"`
	Founder          string      `json:"founder"`
	LegalAddress     string      `json:"legal_address"`
	FactualAddress   pgtype.Text `json:"factual_address"`
}

type CreateInstitutionDetailsRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionDetails(ctx context.Context, arg CreateInstitutionDetailsParams) (CreateInstitutionDetailsRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionDetails,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.InstitutionType,
		arg.InstitutionTitle,
		arg.LegalStatus,
		arg.Mission,
		arg.Founder,
		arg.LegalAddress,
		arg.FactualAddress,
	)
	var i CreateInstitutionDetailsRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInsitutionDetails = `-- name: DeleteInsitutionDetails :exec
DELETE FROM institution_details 
WHERE id = $1
`

func (q *Queries) DeleteInsitutionDetails(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInsitutionDetails, id)
	return err
}

const getInstitutionDetailsByID = `-- name: GetInstitutionDetailsByID :one
SELECT id, institution_id, language_code, institution_type, institution_title, legal_status, mission, founder, legal_address, factual_address, created_at, updated_at
FROM institution_details
WHERE id = $1
`

func (q *Queries) GetInstitutionDetailsByID(ctx context.Context, id int64) (InstitutionDetail, error) {
	row := q.db.QueryRow(ctx, getInstitutionDetailsByID, id)
	var i InstitutionDetail
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.InstitutionType,
		&i.InstitutionTitle,
		&i.LegalStatus,
		&i.Mission,
		&i.Founder,
		&i.LegalAddress,
		&i.FactualAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionDetailsByInstitutionIDAndLanguage = `-- name: GetInstitutionDetailsByInstitutionIDAndLanguage :one
SELECT id, institution_id, language_code, institution_type, institution_title, legal_status, mission, founder, legal_address, factual_address, created_at, updated_at
FROM institution_details
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionDetailsByInstitutionIDAndLanguageParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionDetailsByInstitutionIDAndLanguage(ctx context.Context, arg GetInstitutionDetailsByInstitutionIDAndLanguageParams) (InstitutionDetail, error) {
	row := q.db.QueryRow(ctx, getInstitutionDetailsByInstitutionIDAndLanguage, arg.InstitutionID, arg.LanguageCode)
	var i InstitutionDetail
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.InstitutionType,
		&i.InstitutionTitle,
		&i.LegalStatus,
		&i.Mission,
		&i.Founder,
		&i.LegalAddress,
		&i.FactualAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInsitutionDetails = `-- name: UpdateInsitutionDetails :one
UPDATE institution_details
SET 
  institution_type = COALESCE($1, institution_type),
  institution_title = COALESCE($2, institution_title),
  legal_status = COALESCE($3, legal_status),
  mission = COALESCE($4, mission),
  founder = COALESCE($5, founder),
  legal_address = COALESCE($6, legal_address),
  factual_address = COALESCE($7, factual_address),
  updated_at = now()
WHERE id = $8
RETURNING id, created_at, updated_at
`

type UpdateInsitutionDetailsParams struct {
	InstitutionType  string      `json:"institution_type"`
	InstitutionTitle string      `json:"institution_title"`
	LegalStatus      string      `json:"legal_status"`
	Mission          string      `json:"mission"`
	Founder          string      `json:"founder"`
	LegalAddress     string      `json:"legal_address"`
	FactualAddress   pgtype.Text `json:"factual_address"`
	ID               int64       `json:"id"`
}

type UpdateInsitutionDetailsRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInsitutionDetails(ctx context.Context, arg UpdateInsitutionDetailsParams) (UpdateInsitutionDetailsRow, error) {
	row := q.db.QueryRow(ctx, updateInsitutionDetails,
		arg.InstitutionType,
		arg.InstitutionTitle,
		arg.LegalStatus,
		arg.Mission,
		arg.Founder,
		arg.LegalAddress,
		arg.FactualAddress,
		arg.ID,
	)
	var i UpdateInsitutionDetailsRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
