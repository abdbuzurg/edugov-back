// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_refresher_course.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeRefresherCourse = `-- name: CreateEmployeeRefresherCourse :one
INSERT INTO employee_refresher_courses(
  employee_id,
  language_code,
  course_title,
  date_start,
  date_end
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at
`

type CreateEmployeeRefresherCourseParams struct {
	EmployeeID   int64       `json:"employee_id"`
	LanguageCode string      `json:"language_code"`
	CourseTitle  string      `json:"course_title"`
	DateStart    pgtype.Date `json:"date_start"`
	DateEnd      pgtype.Date `json:"date_end"`
}

type CreateEmployeeRefresherCourseRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeRefresherCourse(ctx context.Context, arg CreateEmployeeRefresherCourseParams) (CreateEmployeeRefresherCourseRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeRefresherCourse,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.CourseTitle,
		arg.DateStart,
		arg.DateEnd,
	)
	var i CreateEmployeeRefresherCourseRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeRefresherCourse = `-- name: DeleteEmployeeRefresherCourse :exec
DELETE FROM employee_refresher_courses
WHERE id = $1
`

func (q *Queries) DeleteEmployeeRefresherCourse(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeRefresherCourse, id)
	return err
}

const getEmployeeRefresherCourseByID = `-- name: GetEmployeeRefresherCourseByID :one
SELECT id, employee_id, language_code, course_title, date_start, date_end, created_at, updated_at
FROM employee_refresher_courses
WHERE id = $1
`

func (q *Queries) GetEmployeeRefresherCourseByID(ctx context.Context, id int64) (EmployeeRefresherCourse, error) {
	row := q.db.QueryRow(ctx, getEmployeeRefresherCourseByID, id)
	var i EmployeeRefresherCourse
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.CourseTitle,
		&i.DateStart,
		&i.DateEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeRefresherCoursesByEmployeeIDAndLanguageCode = `-- name: GetEmployeeRefresherCoursesByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, course_title, date_start, date_end, created_at, updated_at
FROM employee_refresher_courses
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeeRefresherCoursesByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeeRefresherCoursesByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeeRefresherCoursesByEmployeeIDAndLanguageCodeParams) ([]EmployeeRefresherCourse, error) {
	rows, err := q.db.Query(ctx, getEmployeeRefresherCoursesByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeRefresherCourse{}
	for rows.Next() {
		var i EmployeeRefresherCourse
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.CourseTitle,
			&i.DateStart,
			&i.DateEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeRefresherCourse = `-- name: UpdateEmployeeRefresherCourse :one
UPDATE employee_refresher_courses
SET 
  course_title = COALESCE($1, course_title),
  date_start = COALESCE($2, date_start),
  date_end = COALESCE($3, date_end),
  updated_at = now()
WHERE id = $4
RETURNING id, created_at, updated_at
`

type UpdateEmployeeRefresherCourseParams struct {
	CourseTitle string      `json:"course_title"`
	DateStart   pgtype.Date `json:"date_start"`
	DateEnd     pgtype.Date `json:"date_end"`
	ID          int64       `json:"id"`
}

type UpdateEmployeeRefresherCourseRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeRefresherCourse(ctx context.Context, arg UpdateEmployeeRefresherCourseParams) (UpdateEmployeeRefresherCourseRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeRefresherCourse,
		arg.CourseTitle,
		arg.DateStart,
		arg.DateEnd,
		arg.ID,
	)
	var i UpdateEmployeeRefresherCourseRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
