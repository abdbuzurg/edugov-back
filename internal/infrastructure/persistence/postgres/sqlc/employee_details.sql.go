// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_details.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeDetails = `-- name: CreateEmployeeDetails :one
INSERT INTO employee_details (
  employee_id,
  language_code,
  surname,
  name,
  middlename,
  is_employee_details_new
) VALUES(
  $1, $2, $3, $4, $5, $6
) RETURNING id, created_at, updated_at
`

type CreateEmployeeDetailsParams struct {
	EmployeeID           int64       `json:"employee_id"`
	LanguageCode         string      `json:"language_code"`
	Surname              string      `json:"surname"`
	Name                 string      `json:"name"`
	Middlename           pgtype.Text `json:"middlename"`
	IsEmployeeDetailsNew bool        `json:"is_employee_details_new"`
}

type CreateEmployeeDetailsRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeDetails(ctx context.Context, arg CreateEmployeeDetailsParams) (CreateEmployeeDetailsRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeDetails,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.Surname,
		arg.Name,
		arg.Middlename,
		arg.IsEmployeeDetailsNew,
	)
	var i CreateEmployeeDetailsRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeDetails = `-- name: DeleteEmployeeDetails :exec
DELETE FROM employee_details 
WHERE id = $1
`

func (q *Queries) DeleteEmployeeDetails(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeDetails, id)
	return err
}

const getCurrentEmployeeDetailsByEmployeeIDAndLanguageCode = `-- name: GetCurrentEmployeeDetailsByEmployeeIDAndLanguageCode :one
SELECT id, employee_id, language_code, surname, name, middlename, is_employee_details_new, created_at, updated_at
FROM employee_details
WHERE 
  employee_id = $1
  AND language_code = $2
  AND is_employee_details_new = 'true'
`

type GetCurrentEmployeeDetailsByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetCurrentEmployeeDetailsByEmployeeIDAndLanguageCode(ctx context.Context, arg GetCurrentEmployeeDetailsByEmployeeIDAndLanguageCodeParams) (EmployeeDetail, error) {
	row := q.db.QueryRow(ctx, getCurrentEmployeeDetailsByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	var i EmployeeDetail
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.Surname,
		&i.Name,
		&i.Middlename,
		&i.IsEmployeeDetailsNew,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeDetailsByEmployeeID = `-- name: GetEmployeeDetailsByEmployeeID :many
SELECT id, employee_id, language_code, surname, name, middlename, is_employee_details_new, created_at, updated_at
FROM employee_details
WHERE employee_id = $1
`

func (q *Queries) GetEmployeeDetailsByEmployeeID(ctx context.Context, employeeID int64) ([]EmployeeDetail, error) {
	rows, err := q.db.Query(ctx, getEmployeeDetailsByEmployeeID, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeDetail{}
	for rows.Next() {
		var i EmployeeDetail
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.Surname,
			&i.Name,
			&i.Middlename,
			&i.IsEmployeeDetailsNew,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeDetailsByID = `-- name: GetEmployeeDetailsByID :one
SELECT id, employee_id, language_code, surname, name, middlename, is_employee_details_new, created_at, updated_at
FROM employee_details
WHERE id = $1
`

func (q *Queries) GetEmployeeDetailsByID(ctx context.Context, id int64) (EmployeeDetail, error) {
	row := q.db.QueryRow(ctx, getEmployeeDetailsByID, id)
	var i EmployeeDetail
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.Surname,
		&i.Name,
		&i.Middlename,
		&i.IsEmployeeDetailsNew,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmployeeDetails = `-- name: UpdateEmployeeDetails :one
UPDATE employee_details
SET 
  surname = COALESCE($1, surname),
  name = COALESCE($2, name),
  middlename = COALESCE($3, middlename),
  is_employee_details_new = COALESCE($4, is_employee_details_new),
  updated_at = now()
WHERE id = $5
RETURNING id, created_at, updated_at
`

type UpdateEmployeeDetailsParams struct {
	Surname              string      `json:"surname"`
	Name                 string      `json:"name"`
	Middlename           pgtype.Text `json:"middlename"`
	IsEmployeeDetailsNew bool        `json:"is_employee_details_new"`
	ID                   int64       `json:"id"`
}

type UpdateEmployeeDetailsRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeDetails(ctx context.Context, arg UpdateEmployeeDetailsParams) (UpdateEmployeeDetailsRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeDetails,
		arg.Surname,
		arg.Name,
		arg.Middlename,
		arg.IsEmployeeDetailsNew,
		arg.ID,
	)
	var i UpdateEmployeeDetailsRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
