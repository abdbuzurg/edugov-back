// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_participation_in_event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeParticipationInEvent = `-- name: CreateEmployeeParticipationInEvent :one
INSERT INTO employee_participation_in_events(
  employee_id,
  language_code,
  event_title,
  event_date
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeeParticipationInEventParams struct {
	EmployeeID   int64       `json:"employee_id"`
	LanguageCode string      `json:"language_code"`
	EventTitle   string      `json:"event_title"`
	EventDate    pgtype.Date `json:"event_date"`
}

type CreateEmployeeParticipationInEventRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeParticipationInEvent(ctx context.Context, arg CreateEmployeeParticipationInEventParams) (CreateEmployeeParticipationInEventRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeParticipationInEvent,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.EventTitle,
		arg.EventDate,
	)
	var i CreateEmployeeParticipationInEventRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeParticipationInEvent = `-- name: DeleteEmployeeParticipationInEvent :exec
DELETE FROM employee_participation_in_events
WHERE id = $1
`

func (q *Queries) DeleteEmployeeParticipationInEvent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeParticipationInEvent, id)
	return err
}

const getEmployeeParticipationInEventByID = `-- name: GetEmployeeParticipationInEventByID :one
SELECT id, employee_id, language_code, event_title, event_date, created_at, updated_at
FROM employee_participation_in_events
WHERE id = $1
`

func (q *Queries) GetEmployeeParticipationInEventByID(ctx context.Context, id int64) (EmployeeParticipationInEvent, error) {
	row := q.db.QueryRow(ctx, getEmployeeParticipationInEventByID, id)
	var i EmployeeParticipationInEvent
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.EventTitle,
		&i.EventDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeParticipationInEventsByEmployeeIDAndLanguageCode = `-- name: GetEmployeeParticipationInEventsByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, event_title, event_date, created_at, updated_at
FROM employee_participation_in_events
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeeParticipationInEventsByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeeParticipationInEventsByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeeParticipationInEventsByEmployeeIDAndLanguageCodeParams) ([]EmployeeParticipationInEvent, error) {
	rows, err := q.db.Query(ctx, getEmployeeParticipationInEventsByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeParticipationInEvent{}
	for rows.Next() {
		var i EmployeeParticipationInEvent
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.EventTitle,
			&i.EventDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeParticipationInEvent = `-- name: UpdateEmployeeParticipationInEvent :one
UPDATE employee_participation_in_events 
SET 
  event_title = COALESCE($1, event_title),
  event_date = COALESCE($2, event_date),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeeParticipationInEventParams struct {
	EventTitle string      `json:"event_title"`
	EventDate  pgtype.Date `json:"event_date"`
	ID         int64       `json:"id"`
}

type UpdateEmployeeParticipationInEventRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeParticipationInEvent(ctx context.Context, arg UpdateEmployeeParticipationInEventParams) (UpdateEmployeeParticipationInEventRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeParticipationInEvent, arg.EventTitle, arg.EventDate, arg.ID)
	var i UpdateEmployeeParticipationInEventRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
