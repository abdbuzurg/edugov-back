// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_session.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_session(
  user_id,
  refresh_token,
  expires_at
) VALUES (
  $1, $2, $3
) RETURNING id, created_at, updated_at
`

type CreateUserSessionParams struct {
	UserID       int64              `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

type CreateUserSessionRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (CreateUserSessionRow, error) {
	row := q.db.QueryRow(ctx, createUserSession, arg.UserID, arg.RefreshToken, arg.ExpiresAt)
	var i CreateUserSessionRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteUserSessionByID = `-- name: DeleteUserSessionByID :exec
DELETE FROM user_session
WHERE id = $1
`

func (q *Queries) DeleteUserSessionByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserSessionByID, id)
	return err
}

const deleteUserSessionByUserID = `-- name: DeleteUserSessionByUserID :exec
DELETE FROM user_session
WHERE user_id = $1
`

func (q *Queries) DeleteUserSessionByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUserSessionByUserID, userID)
	return err
}

const getUserSessionByToken = `-- name: GetUserSessionByToken :one
SELECT id, user_id, refresh_token, expires_at, created_at, updated_at
FROM user_session
WHERE refresh_token = $1
`

func (q *Queries) GetUserSessionByToken(ctx context.Context, refreshToken string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getUserSessionByToken, refreshToken)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSession = `-- name: UpdateUserSession :one
UPDATE user_session
SET 
  refresh_token = COALESCE($1, refresh_token),
  expires_at = COALESCE($2, refresh_token)
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateUserSessionParams struct {
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
	ID           int64              `json:"id"`
}

type UpdateUserSessionRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateUserSession(ctx context.Context, arg UpdateUserSessionParams) (UpdateUserSessionRow, error) {
	row := q.db.QueryRow(ctx, updateUserSession, arg.RefreshToken, arg.ExpiresAt, arg.ID)
	var i UpdateUserSessionRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
