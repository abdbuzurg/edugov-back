// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitution = `-- name: CreateInstitution :one
INSERT INTO institutions (
  year_of_establishment,
  email,
  fax,
  official_website
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateInstitutionParams struct {
	YearOfEstablishment int32  `json:"year_of_establishment"`
	Email               string `json:"email"`
	Fax                 string `json:"fax"`
	OfficialWebsite     string `json:"official_website"`
}

type CreateInstitutionRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitution(ctx context.Context, arg CreateInstitutionParams) (CreateInstitutionRow, error) {
	row := q.db.QueryRow(ctx, createInstitution,
		arg.YearOfEstablishment,
		arg.Email,
		arg.Fax,
		arg.OfficialWebsite,
	)
	var i CreateInstitutionRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInsitution = `-- name: DeleteInsitution :exec
DELETE FROM institutions
WHERE id = $1
`

func (q *Queries) DeleteInsitution(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInsitution, id)
	return err
}

const getInstitutionByID = `-- name: GetInstitutionByID :one
SELECT id, year_of_establishment, email, fax, official_website, created_at, updated_at
FROM institutions
WHERE 
  id = $1
`

func (q *Queries) GetInstitutionByID(ctx context.Context, id int64) (Institution, error) {
	row := q.db.QueryRow(ctx, getInstitutionByID, id)
	var i Institution
	err := row.Scan(
		&i.ID,
		&i.YearOfEstablishment,
		&i.Email,
		&i.Fax,
		&i.OfficialWebsite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInstitution = `-- name: UpdateInstitution :one
UPDATE institutions
SET 
  year_of_establishment = COALESCE($2, year_of_establishment),
  email = COALESCE($3, email),
  fax = COALESCE($4, fax),
  official_website = COALESCE($5, official_website),
  updated_at = now()
WHERE id = $1
RETURNING id, created_at, updated_at
`

type UpdateInstitutionParams struct {
	ID                  int64  `json:"id"`
	YearOfEstablishment int32  `json:"year_of_establishment"`
	Email               string `json:"email"`
	Fax                 string `json:"fax"`
	OfficialWebsite     string `json:"official_website"`
}

type UpdateInstitutionRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitution(ctx context.Context, arg UpdateInstitutionParams) (UpdateInstitutionRow, error) {
	row := q.db.QueryRow(ctx, updateInstitution,
		arg.ID,
		arg.YearOfEstablishment,
		arg.Email,
		arg.Fax,
		arg.OfficialWebsite,
	)
	var i UpdateInstitutionRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
