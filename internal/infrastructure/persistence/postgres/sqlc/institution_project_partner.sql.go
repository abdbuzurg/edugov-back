// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: institution_project_partner.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionProjectPartner = `-- name: CreateInstitutionProjectPartner :one
INSERT INTO institution_project_partners(
  institution_project_id,
  language_code,
  partner_name,
  partner_type,
  link_to_partner
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at
`

type CreateInstitutionProjectPartnerParams struct {
	InstitutionProjectID int64  `json:"institution_project_id"`
	LanguageCode         string `json:"language_code"`
	PartnerName          string `json:"partner_name"`
	PartnerType          string `json:"partner_type"`
	LinkToPartner        string `json:"link_to_partner"`
}

type CreateInstitutionProjectPartnerRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionProjectPartner(ctx context.Context, arg CreateInstitutionProjectPartnerParams) (CreateInstitutionProjectPartnerRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionProjectPartner,
		arg.InstitutionProjectID,
		arg.LanguageCode,
		arg.PartnerName,
		arg.PartnerType,
		arg.LinkToPartner,
	)
	var i CreateInstitutionProjectPartnerRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionProjectPartner = `-- name: DeleteInstitutionProjectPartner :exec
DELETE FROM institution_project_partners
WHERE id = $1
`

func (q *Queries) DeleteInstitutionProjectPartner(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionProjectPartner, id)
	return err
}

const getInstitutionProjectPartnerByID = `-- name: GetInstitutionProjectPartnerByID :one
SELECT id, institution_project_id, language_code, partner_type, partner_name, link_to_partner, created_at, updated_at
FROM institution_project_partners
WHERE id = $1
`

func (q *Queries) GetInstitutionProjectPartnerByID(ctx context.Context, id int64) (InstitutionProjectPartner, error) {
	row := q.db.QueryRow(ctx, getInstitutionProjectPartnerByID, id)
	var i InstitutionProjectPartner
	err := row.Scan(
		&i.ID,
		&i.InstitutionProjectID,
		&i.LanguageCode,
		&i.PartnerType,
		&i.PartnerName,
		&i.LinkToPartner,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionProjectPartnersByInstitutionProjectIDAndLanguageCode = `-- name: GetInstitutionProjectPartnersByInstitutionProjectIDAndLanguageCode :many
SELECT id, institution_project_id, language_code, partner_type, partner_name, link_to_partner, created_at, updated_at
FROM institution_project_partners
WHERE institution_project_id = $1 AND language_code = $2
`

type GetInstitutionProjectPartnersByInstitutionProjectIDAndLanguageCodeParams struct {
	InstitutionProjectID int64  `json:"institution_project_id"`
	LanguageCode         string `json:"language_code"`
}

func (q *Queries) GetInstitutionProjectPartnersByInstitutionProjectIDAndLanguageCode(ctx context.Context, arg GetInstitutionProjectPartnersByInstitutionProjectIDAndLanguageCodeParams) ([]InstitutionProjectPartner, error) {
	rows, err := q.db.Query(ctx, getInstitutionProjectPartnersByInstitutionProjectIDAndLanguageCode, arg.InstitutionProjectID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionProjectPartner{}
	for rows.Next() {
		var i InstitutionProjectPartner
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionProjectID,
			&i.LanguageCode,
			&i.PartnerType,
			&i.PartnerName,
			&i.LinkToPartner,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionProjectPartner = `-- name: UpdateInstitutionProjectPartner :one
UPDATE institution_project_partners
SET
  partner_name = COALESCE($1, partner_name),
  partner_type = COALESCE($2, partner_type),
  link_to_partner = COALESCE($3, link_to_partner),
  updated_at = now()
WHERE id = $4
RETURNING id, created_at, updated_at
`

type UpdateInstitutionProjectPartnerParams struct {
	PartnerName   string `json:"partner_name"`
	PartnerType   string `json:"partner_type"`
	LinkToPartner string `json:"link_to_partner"`
	ID            int64  `json:"id"`
}

type UpdateInstitutionProjectPartnerRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionProjectPartner(ctx context.Context, arg UpdateInstitutionProjectPartnerParams) (UpdateInstitutionProjectPartnerRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionProjectPartner,
		arg.PartnerName,
		arg.PartnerType,
		arg.LinkToPartner,
		arg.ID,
	)
	var i UpdateInstitutionProjectPartnerRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
