// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution_achievement.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionAchievement = `-- name: CreateInstitutionAchievement :one
INSERT INTO institution_achievements(
  institution_id,
  language_code,
  achievement_title,
  achievement_type,
  date_recieved,
  given_by,
  link_to_file,
  description
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8  
) RETURNING id, created_at, updated_at
`

type CreateInstitutionAchievementParams struct {
	InstitutionID    int64       `json:"institution_id"`
	LanguageCode     string      `json:"language_code"`
	AchievementTitle string      `json:"achievement_title"`
	AchievementType  string      `json:"achievement_type"`
	DateRecieved     pgtype.Date `json:"date_recieved"`
	GivenBy          string      `json:"given_by"`
	LinkToFile       string      `json:"link_to_file"`
	Description      pgtype.Text `json:"description"`
}

type CreateInstitutionAchievementRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionAchievement(ctx context.Context, arg CreateInstitutionAchievementParams) (CreateInstitutionAchievementRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionAchievement,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.AchievementTitle,
		arg.AchievementType,
		arg.DateRecieved,
		arg.GivenBy,
		arg.LinkToFile,
		arg.Description,
	)
	var i CreateInstitutionAchievementRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionAchivement = `-- name: DeleteInstitutionAchivement :exec
DELETE FROM institution_achievements
WHERE id = $1
`

func (q *Queries) DeleteInstitutionAchivement(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionAchivement, id)
	return err
}

const getInstitutionAchievementByID = `-- name: GetInstitutionAchievementByID :one
SELECT id, institution_id, language_code, achievement_title, achievement_type, date_recieved, given_by, link_to_file, description, created_at, updated_at
FROM institution_achievements
WHERE id = $1
`

func (q *Queries) GetInstitutionAchievementByID(ctx context.Context, id int64) (InstitutionAchievement, error) {
	row := q.db.QueryRow(ctx, getInstitutionAchievementByID, id)
	var i InstitutionAchievement
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.AchievementTitle,
		&i.AchievementType,
		&i.DateRecieved,
		&i.GivenBy,
		&i.LinkToFile,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionAchievementsByInstitutionIDAndLanguageCode = `-- name: GetInstitutionAchievementsByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, achievement_title, achievement_type, date_recieved, given_by, link_to_file, description, created_at, updated_at
FROM institution_achievements
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionAchievementsByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionAchievementsByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionAchievementsByInstitutionIDAndLanguageCodeParams) ([]InstitutionAchievement, error) {
	rows, err := q.db.Query(ctx, getInstitutionAchievementsByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionAchievement{}
	for rows.Next() {
		var i InstitutionAchievement
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.AchievementTitle,
			&i.AchievementType,
			&i.DateRecieved,
			&i.GivenBy,
			&i.LinkToFile,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionAchievement = `-- name: UpdateInstitutionAchievement :one
UPDATE institution_achievements
SET
  achievement_title = COALESCE($1, achievement_title),
  achievement_type = COALESCE($2, achievement_type),
  date_recieved = COALESCE($3, date_recieved),
  given_by = COALESCE($4, given_by),
  link_to_file = COALESCE($5, link_to_file),
  description = COALESCE($6, description),
  updated_at = now()
WHERE id = $7
RETURNING id, created_at, updated_at
`

type UpdateInstitutionAchievementParams struct {
	AchievementTitle string      `json:"achievement_title"`
	AchievementType  string      `json:"achievement_type"`
	DateRecieved     pgtype.Date `json:"date_recieved"`
	GivenBy          string      `json:"given_by"`
	LinkToFile       string      `json:"link_to_file"`
	Description      pgtype.Text `json:"description"`
	ID               int64       `json:"id"`
}

type UpdateInstitutionAchievementRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionAchievement(ctx context.Context, arg UpdateInstitutionAchievementParams) (UpdateInstitutionAchievementRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionAchievement,
		arg.AchievementTitle,
		arg.AchievementType,
		arg.DateRecieved,
		arg.GivenBy,
		arg.LinkToFile,
		arg.Description,
		arg.ID,
	)
	var i UpdateInstitutionAchievementRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
