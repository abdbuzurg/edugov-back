// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: employee_social.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeSocial = `-- name: CreateEmployeeSocial :one
INSERT INTO employee_socials(
  employee_id,
  social_name,
  link_to_social
) VALUES (
  $1, $2, $3
) RETURNING id, created_at, updated_at
`

type CreateEmployeeSocialParams struct {
	EmployeeID   int64  `json:"employee_id"`
	SocialName   string `json:"social_name"`
	LinkToSocial string `json:"link_to_social"`
}

type CreateEmployeeSocialRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeSocial(ctx context.Context, arg CreateEmployeeSocialParams) (CreateEmployeeSocialRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeSocial, arg.EmployeeID, arg.SocialName, arg.LinkToSocial)
	var i CreateEmployeeSocialRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeSocial = `-- name: DeleteEmployeeSocial :exec
DELETE FROM employee_socials
WHERE id = $1
`

func (q *Queries) DeleteEmployeeSocial(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeSocial, id)
	return err
}

const getEmployeeSocialByID = `-- name: GetEmployeeSocialByID :one
SELECT id, employee_id, social_name, link_to_social, created_at, updated_at
FROM employee_socials
WHERE id = $1
`

func (q *Queries) GetEmployeeSocialByID(ctx context.Context, id int64) (EmployeeSocial, error) {
	row := q.db.QueryRow(ctx, getEmployeeSocialByID, id)
	var i EmployeeSocial
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.SocialName,
		&i.LinkToSocial,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeSocialsByEmployeeIDAndLanguageCode = `-- name: GetEmployeeSocialsByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, social_name, link_to_social, created_at, updated_at
FROM employee_socials
WHERE employee_id = $1
`

func (q *Queries) GetEmployeeSocialsByEmployeeIDAndLanguageCode(ctx context.Context, employeeID int64) ([]EmployeeSocial, error) {
	rows, err := q.db.Query(ctx, getEmployeeSocialsByEmployeeIDAndLanguageCode, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeSocial{}
	for rows.Next() {
		var i EmployeeSocial
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.SocialName,
			&i.LinkToSocial,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeSocial = `-- name: UpdateEmployeeSocial :one
UPDATE employee_socials 
SET 
  social_name = COALESCE($1, social_name),
  link_to_social = COALESCE($2, link_to_social),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeeSocialParams struct {
	SocialName   string `json:"social_name"`
	LinkToSocial string `json:"link_to_social"`
	ID           int64  `json:"id"`
}

type UpdateEmployeeSocialRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeSocial(ctx context.Context, arg UpdateEmployeeSocialParams) (UpdateEmployeeSocialRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeSocial, arg.SocialName, arg.LinkToSocial, arg.ID)
	var i UpdateEmployeeSocialRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
