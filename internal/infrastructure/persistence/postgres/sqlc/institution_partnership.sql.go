// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution_partnership.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionPartnership = `-- name: CreateInstitutionPartnership :one
INSERT INTO institution_partnerships(
  institution_id,
  language_code,
  partner_name,
  partner_type,
  date_of_contract,
  link_to_partner,
  goal
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, created_at, updated_at
`

type CreateInstitutionPartnershipParams struct {
	InstitutionID  int64       `json:"institution_id"`
	LanguageCode   string      `json:"language_code"`
	PartnerName    string      `json:"partner_name"`
	PartnerType    string      `json:"partner_type"`
	DateOfContract pgtype.Date `json:"date_of_contract"`
	LinkToPartner  string      `json:"link_to_partner"`
	Goal           string      `json:"goal"`
}

type CreateInstitutionPartnershipRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionPartnership(ctx context.Context, arg CreateInstitutionPartnershipParams) (CreateInstitutionPartnershipRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionPartnership,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.PartnerName,
		arg.PartnerType,
		arg.DateOfContract,
		arg.LinkToPartner,
		arg.Goal,
	)
	var i CreateInstitutionPartnershipRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionPartnership = `-- name: DeleteInstitutionPartnership :exec
DELETE FROM institution_partnerships
WHERE id = $1
`

func (q *Queries) DeleteInstitutionPartnership(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionPartnership, id)
	return err
}

const getInstitutionPartnershipByID = `-- name: GetInstitutionPartnershipByID :one
SELECT id, institution_id, language_code, partner_name, partner_type, date_of_contract, link_to_partner, goal, created_at, updated_at
FROM institution_partnerships
WHERE id = $1
`

func (q *Queries) GetInstitutionPartnershipByID(ctx context.Context, id int64) (InstitutionPartnership, error) {
	row := q.db.QueryRow(ctx, getInstitutionPartnershipByID, id)
	var i InstitutionPartnership
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.PartnerName,
		&i.PartnerType,
		&i.DateOfContract,
		&i.LinkToPartner,
		&i.Goal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionPartnershipsByInstitutionIDAndLanguageCode = `-- name: GetInstitutionPartnershipsByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, partner_name, partner_type, date_of_contract, link_to_partner, goal, created_at, updated_at
FROM institution_partnerships
WHERE institution_id = $1 and language_code = $2
`

type GetInstitutionPartnershipsByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionPartnershipsByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionPartnershipsByInstitutionIDAndLanguageCodeParams) ([]InstitutionPartnership, error) {
	rows, err := q.db.Query(ctx, getInstitutionPartnershipsByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionPartnership{}
	for rows.Next() {
		var i InstitutionPartnership
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.PartnerName,
			&i.PartnerType,
			&i.DateOfContract,
			&i.LinkToPartner,
			&i.Goal,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionPartnership = `-- name: UpdateInstitutionPartnership :one
UPDATE institution_partnerships
SET
  partner_name = COALESCE($1, partner_name),
  partner_type = COALESCE($2, partner_type),
  date_of_contract = COALESCE($3, date_of_contract),
  link_to_partner = COALESCE($4, link_to_partner),
  goal = COALESCE($5, goal),
  updated_at = now()
WHERE id = $6
RETURNING id, created_at, updated_at
`

type UpdateInstitutionPartnershipParams struct {
	PartnerName    string      `json:"partner_name"`
	PartnerType    string      `json:"partner_type"`
	DateOfContract pgtype.Date `json:"date_of_contract"`
	LinkToPartner  string      `json:"link_to_partner"`
	Goal           string      `json:"goal"`
	ID             int64       `json:"id"`
}

type UpdateInstitutionPartnershipRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionPartnership(ctx context.Context, arg UpdateInstitutionPartnershipParams) (UpdateInstitutionPartnershipRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionPartnership,
		arg.PartnerName,
		arg.PartnerType,
		arg.DateOfContract,
		arg.LinkToPartner,
		arg.Goal,
		arg.ID,
	)
	var i UpdateInstitutionPartnershipRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
