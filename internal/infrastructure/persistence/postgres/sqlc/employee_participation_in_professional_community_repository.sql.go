// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_participation_in_professional_community_repository.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeParticipationInProfessionalCommunity = `-- name: CreateEmployeeParticipationInProfessionalCommunity :one
INSERT INTO employee_participation_in_professional_communities(
  employee_id,
  language_code,
  professional_community_title,
  role_in_professional_community
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeeParticipationInProfessionalCommunityParams struct {
	EmployeeID                  int64  `json:"employee_id"`
	LanguageCode                string `json:"language_code"`
	ProfessionalCommunityTitle  string `json:"professional_community_title"`
	RoleInProfessionalCommunity string `json:"role_in_professional_community"`
}

type CreateEmployeeParticipationInProfessionalCommunityRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeParticipationInProfessionalCommunity(ctx context.Context, arg CreateEmployeeParticipationInProfessionalCommunityParams) (CreateEmployeeParticipationInProfessionalCommunityRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeParticipationInProfessionalCommunity,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.ProfessionalCommunityTitle,
		arg.RoleInProfessionalCommunity,
	)
	var i CreateEmployeeParticipationInProfessionalCommunityRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeParticipationInProfessionalCommunity = `-- name: DeleteEmployeeParticipationInProfessionalCommunity :exec
DELETE FROM employee_participation_in_professional_communities
WHERE id = $1
`

func (q *Queries) DeleteEmployeeParticipationInProfessionalCommunity(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeParticipationInProfessionalCommunity, id)
	return err
}

const getEmployeeParticipationInProfessionalCommunityByID = `-- name: GetEmployeeParticipationInProfessionalCommunityByID :one
SELECT id, employee_id, professional_community_title, language_code, role_in_professional_community, created_at, updated_at
FROM employee_participation_in_professional_communities
WHERE id = $1
`

func (q *Queries) GetEmployeeParticipationInProfessionalCommunityByID(ctx context.Context, id int64) (EmployeeParticipationInProfessionalCommunity, error) {
	row := q.db.QueryRow(ctx, getEmployeeParticipationInProfessionalCommunityByID, id)
	var i EmployeeParticipationInProfessionalCommunity
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.ProfessionalCommunityTitle,
		&i.LanguageCode,
		&i.RoleInProfessionalCommunity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeParticipationInProfessionalCommunitysByEmployeeIDAndLanguageCode = `-- name: GetEmployeeParticipationInProfessionalCommunitysByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, professional_community_title, language_code, role_in_professional_community, created_at, updated_at
FROM employee_participation_in_professional_communities
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeeParticipationInProfessionalCommunitysByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeeParticipationInProfessionalCommunitysByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeeParticipationInProfessionalCommunitysByEmployeeIDAndLanguageCodeParams) ([]EmployeeParticipationInProfessionalCommunity, error) {
	rows, err := q.db.Query(ctx, getEmployeeParticipationInProfessionalCommunitysByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeParticipationInProfessionalCommunity{}
	for rows.Next() {
		var i EmployeeParticipationInProfessionalCommunity
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.ProfessionalCommunityTitle,
			&i.LanguageCode,
			&i.RoleInProfessionalCommunity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeParticipationInProfessionalCommunity = `-- name: UpdateEmployeeParticipationInProfessionalCommunity :one
UPDATE employee_participation_in_professional_communities 
SET 
  professional_community_title = COALESCE($1, professional_community_title),
  role_in_professional_community = COALESCE($2, role_in_professional_community),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeeParticipationInProfessionalCommunityParams struct {
	ProfessionalCommunityTitle  string `json:"professional_community_title"`
	RoleInProfessionalCommunity string `json:"role_in_professional_community"`
	ID                          int64  `json:"id"`
}

type UpdateEmployeeParticipationInProfessionalCommunityRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeParticipationInProfessionalCommunity(ctx context.Context, arg UpdateEmployeeParticipationInProfessionalCommunityParams) (UpdateEmployeeParticipationInProfessionalCommunityRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeParticipationInProfessionalCommunity, arg.ProfessionalCommunityTitle, arg.RoleInProfessionalCommunity, arg.ID)
	var i UpdateEmployeeParticipationInProfessionalCommunityRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
