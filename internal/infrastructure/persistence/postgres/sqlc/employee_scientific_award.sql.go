// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee_scientific_award.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeScientificAward = `-- name: CreateEmployeeScientificAward :one
INSERT INTO employee_scientific_awards(
  employee_id,
  language_code,
  scientific_award_title,
  given_by
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeeScientificAwardParams struct {
	EmployeeID           int64  `json:"employee_id"`
	LanguageCode         string `json:"language_code"`
	ScientificAwardTitle string `json:"scientific_award_title"`
	GivenBy              string `json:"given_by"`
}

type CreateEmployeeScientificAwardRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeScientificAward(ctx context.Context, arg CreateEmployeeScientificAwardParams) (CreateEmployeeScientificAwardRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeScientificAward,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.ScientificAwardTitle,
		arg.GivenBy,
	)
	var i CreateEmployeeScientificAwardRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeScientificAward = `-- name: DeleteEmployeeScientificAward :exec
DELETE FROM employee_scientific_awards
WHERE id = $1
`

func (q *Queries) DeleteEmployeeScientificAward(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeScientificAward, id)
	return err
}

const getEmployeeScientificAwardByID = `-- name: GetEmployeeScientificAwardByID :one
SELECT id, employee_id, language_code, scientific_award_title, given_by, created_at, updated_at
FROM employee_scientific_awards
WHERE id = $1
`

func (q *Queries) GetEmployeeScientificAwardByID(ctx context.Context, id int64) (EmployeeScientificAward, error) {
	row := q.db.QueryRow(ctx, getEmployeeScientificAwardByID, id)
	var i EmployeeScientificAward
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.ScientificAwardTitle,
		&i.GivenBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeScientificAwardsByEmployeeIDAndLanguageCode = `-- name: GetEmployeeScientificAwardsByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, scientific_award_title, given_by, created_at, updated_at
FROM employee_scientific_awards
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeeScientificAwardsByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeeScientificAwardsByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeeScientificAwardsByEmployeeIDAndLanguageCodeParams) ([]EmployeeScientificAward, error) {
	rows, err := q.db.Query(ctx, getEmployeeScientificAwardsByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeScientificAward{}
	for rows.Next() {
		var i EmployeeScientificAward
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.ScientificAwardTitle,
			&i.GivenBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeScientificAward = `-- name: UpdateEmployeeScientificAward :one
UPDATE employee_scientific_awards 
SET 
  scientific_award_title = COALESCE($1, scientific_award_title),
  given_by = COALESCE($2, given_by),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeeScientificAwardParams struct {
	ScientificAwardTitle string `json:"scientific_award_title"`
	GivenBy              string `json:"given_by"`
	ID                   int64  `json:"id"`
}

type UpdateEmployeeScientificAwardRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeScientificAward(ctx context.Context, arg UpdateEmployeeScientificAwardParams) (UpdateEmployeeScientificAwardRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeScientificAward, arg.ScientificAwardTitle, arg.GivenBy, arg.ID)
	var i UpdateEmployeeScientificAwardRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
