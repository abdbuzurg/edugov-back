// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution_accreditation.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionAccreditation = `-- name: CreateInstitutionAccreditation :one
INSERT INTO institution_accreditations(
  institution_id,
  language_code,
  accreditation_type,
  given_by
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateInstitutionAccreditationParams struct {
	InstitutionID     int64  `json:"institution_id"`
	LanguageCode      string `json:"language_code"`
	AccreditationType string `json:"accreditation_type"`
	GivenBy           string `json:"given_by"`
}

type CreateInstitutionAccreditationRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionAccreditation(ctx context.Context, arg CreateInstitutionAccreditationParams) (CreateInstitutionAccreditationRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionAccreditation,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.AccreditationType,
		arg.GivenBy,
	)
	var i CreateInstitutionAccreditationRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionAccreditation = `-- name: DeleteInstitutionAccreditation :exec
DELETE FROM institution_accreditations
WHERE id = $1
`

func (q *Queries) DeleteInstitutionAccreditation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionAccreditation, id)
	return err
}

const getInstitutionAccreditationByID = `-- name: GetInstitutionAccreditationByID :one
SELECT id, institution_id, language_code, accreditation_type, given_by, created_at, updated_at
FROM institution_accreditations
WHERE id = $1
`

func (q *Queries) GetInstitutionAccreditationByID(ctx context.Context, id int64) (InstitutionAccreditation, error) {
	row := q.db.QueryRow(ctx, getInstitutionAccreditationByID, id)
	var i InstitutionAccreditation
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.AccreditationType,
		&i.GivenBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionAccreditationsByInstitutionIDAndLanguageCode = `-- name: GetInstitutionAccreditationsByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, accreditation_type, given_by, created_at, updated_at
FROM institution_accreditations
WHERE institution_id = $1 and language_code = $2
`

type GetInstitutionAccreditationsByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionAccreditationsByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionAccreditationsByInstitutionIDAndLanguageCodeParams) ([]InstitutionAccreditation, error) {
	rows, err := q.db.Query(ctx, getInstitutionAccreditationsByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionAccreditation{}
	for rows.Next() {
		var i InstitutionAccreditation
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.AccreditationType,
			&i.GivenBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionAccreditation = `-- name: UpdateInstitutionAccreditation :one
UPDATE institution_accreditations
SET 
  accreditation_type = COALESCE($1, accreditation_type),
  given_by = COALESCE($2, type),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateInstitutionAccreditationParams struct {
	AccreditationType string `json:"accreditation_type"`
	GivenBy           string `json:"given_by"`
	ID                int64  `json:"id"`
}

type UpdateInstitutionAccreditationRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionAccreditation(ctx context.Context, arg UpdateInstitutionAccreditationParams) (UpdateInstitutionAccreditationRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionAccreditation, arg.AccreditationType, arg.GivenBy, arg.ID)
	var i UpdateInstitutionAccreditationRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
