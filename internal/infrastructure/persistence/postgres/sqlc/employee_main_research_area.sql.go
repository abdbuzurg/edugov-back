// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: employee_main_research_area.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployeeMainResearchArea = `-- name: CreateEmployeeMainResearchArea :one
INSERT INTO employee_main_research_areas(
  employee_id,
  language_code,
  area,
  discipline
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, updated_at
`

type CreateEmployeeMainResearchAreaParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
	Area         string `json:"area"`
	Discipline   string `json:"discipline"`
}

type CreateEmployeeMainResearchAreaRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeMainResearchArea(ctx context.Context, arg CreateEmployeeMainResearchAreaParams) (CreateEmployeeMainResearchAreaRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeMainResearchArea,
		arg.EmployeeID,
		arg.LanguageCode,
		arg.Area,
		arg.Discipline,
	)
	var i CreateEmployeeMainResearchAreaRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createEmployeeMainResearchAreaKeyTopic = `-- name: CreateEmployeeMainResearchAreaKeyTopic :one
INSERT INTO employee_main_research_area_key_topics(
  employee_main_research_area_id, 
  key_topic_title
) VALUES (
  $1, $2
) RETURNING id, created_at, updated_at
`

type CreateEmployeeMainResearchAreaKeyTopicParams struct {
	EmployeeMainResearchAreaID int64  `json:"employee_main_research_area_id"`
	KeyTopicTitle              string `json:"key_topic_title"`
}

type CreateEmployeeMainResearchAreaKeyTopicRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmployeeMainResearchAreaKeyTopic(ctx context.Context, arg CreateEmployeeMainResearchAreaKeyTopicParams) (CreateEmployeeMainResearchAreaKeyTopicRow, error) {
	row := q.db.QueryRow(ctx, createEmployeeMainResearchAreaKeyTopic, arg.EmployeeMainResearchAreaID, arg.KeyTopicTitle)
	var i CreateEmployeeMainResearchAreaKeyTopicRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteEmployeeMainResearchArea = `-- name: DeleteEmployeeMainResearchArea :exec
DELETE FROM employee_main_research_areas
WHERE id = $1
`

func (q *Queries) DeleteEmployeeMainResearchArea(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeMainResearchArea, id)
	return err
}

const deleteEmployeeMainResearchAreaKeyTopic = `-- name: DeleteEmployeeMainResearchAreaKeyTopic :exec
DELETE FROM employee_main_research_area_key_topics
WHERE id = $1
`

func (q *Queries) DeleteEmployeeMainResearchAreaKeyTopic(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeMainResearchAreaKeyTopic, id)
	return err
}

const deleteEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaID = `-- name: DeleteEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaID :exec
DELETE FROM employee_main_research_area_key_topics
where employee_main_research_area_id = $1
`

func (q *Queries) DeleteEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaID(ctx context.Context, employeeMainResearchAreaID int64) error {
	_, err := q.db.Exec(ctx, deleteEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaID, employeeMainResearchAreaID)
	return err
}

const getEmployeeMainResearchAreaByID = `-- name: GetEmployeeMainResearchAreaByID :one
SELECT id, employee_id, language_code, area, discipline, created_at, updated_at
FROM employee_main_research_areas
WHERE id = $1
`

func (q *Queries) GetEmployeeMainResearchAreaByID(ctx context.Context, id int64) (EmployeeMainResearchArea, error) {
	row := q.db.QueryRow(ctx, getEmployeeMainResearchAreaByID, id)
	var i EmployeeMainResearchArea
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.LanguageCode,
		&i.Area,
		&i.Discipline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeMainResearchAreaKeyTopicByID = `-- name: GetEmployeeMainResearchAreaKeyTopicByID :one
SELECT id, employee_main_research_area_id, key_topic_title, created_at, updated_at
FROM employee_main_research_area_key_topics 
WHERE id = $1
`

func (q *Queries) GetEmployeeMainResearchAreaKeyTopicByID(ctx context.Context, id int64) (EmployeeMainResearchAreaKeyTopic, error) {
	row := q.db.QueryRow(ctx, getEmployeeMainResearchAreaKeyTopicByID, id)
	var i EmployeeMainResearchAreaKeyTopic
	err := row.Scan(
		&i.ID,
		&i.EmployeeMainResearchAreaID,
		&i.KeyTopicTitle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaIDAndLanguageCode = `-- name: GetEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaIDAndLanguageCode :many
SELECT id, employee_main_research_area_id, key_topic_title, created_at, updated_at
FROM employee_main_research_area_key_topics
WHERE employee_main_research_area_id = $1
`

func (q *Queries) GetEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaIDAndLanguageCode(ctx context.Context, employeeMainResearchAreaID int64) ([]EmployeeMainResearchAreaKeyTopic, error) {
	rows, err := q.db.Query(ctx, getEmployeeMainResearchAreaKeyTopicsByEmployeeMainResearchAreaIDAndLanguageCode, employeeMainResearchAreaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeMainResearchAreaKeyTopic{}
	for rows.Next() {
		var i EmployeeMainResearchAreaKeyTopic
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeMainResearchAreaID,
			&i.KeyTopicTitle,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeMainResearchAreasByEmployeeIDAndLanguageCode = `-- name: GetEmployeeMainResearchAreasByEmployeeIDAndLanguageCode :many
SELECT id, employee_id, language_code, area, discipline, created_at, updated_at
FROM employee_main_research_areas
WHERE employee_id = $1 AND language_code = $2
`

type GetEmployeeMainResearchAreasByEmployeeIDAndLanguageCodeParams struct {
	EmployeeID   int64  `json:"employee_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetEmployeeMainResearchAreasByEmployeeIDAndLanguageCode(ctx context.Context, arg GetEmployeeMainResearchAreasByEmployeeIDAndLanguageCodeParams) ([]EmployeeMainResearchArea, error) {
	rows, err := q.db.Query(ctx, getEmployeeMainResearchAreasByEmployeeIDAndLanguageCode, arg.EmployeeID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeMainResearchArea{}
	for rows.Next() {
		var i EmployeeMainResearchArea
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LanguageCode,
			&i.Area,
			&i.Discipline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeMainResearchArea = `-- name: UpdateEmployeeMainResearchArea :one
UPDATE employee_main_research_areas 
SET 
  area = COALESCE($1, area),
  discipline = COALESCE($2, discipline),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateEmployeeMainResearchAreaParams struct {
	Area       string `json:"area"`
	Discipline string `json:"discipline"`
	ID         int64  `json:"id"`
}

type UpdateEmployeeMainResearchAreaRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeMainResearchArea(ctx context.Context, arg UpdateEmployeeMainResearchAreaParams) (UpdateEmployeeMainResearchAreaRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeMainResearchArea, arg.Area, arg.Discipline, arg.ID)
	var i UpdateEmployeeMainResearchAreaRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const updateEmployeeMainResearchAreaKeyTopic = `-- name: UpdateEmployeeMainResearchAreaKeyTopic :one
UPDATE employee_main_research_area_key_topics
SET
  key_topic_title = COALESCE($1, key_topic_title),
  updated_at = now()
WHERE id = $2
RETURNING id, created_at, updated_at
`

type UpdateEmployeeMainResearchAreaKeyTopicParams struct {
	KeyTopicTitle string `json:"key_topic_title"`
	ID            int64  `json:"id"`
}

type UpdateEmployeeMainResearchAreaKeyTopicRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateEmployeeMainResearchAreaKeyTopic(ctx context.Context, arg UpdateEmployeeMainResearchAreaKeyTopicParams) (UpdateEmployeeMainResearchAreaKeyTopicRow, error) {
	row := q.db.QueryRow(ctx, updateEmployeeMainResearchAreaKeyTopic, arg.KeyTopicTitle, arg.ID)
	var i UpdateEmployeeMainResearchAreaKeyTopicRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
