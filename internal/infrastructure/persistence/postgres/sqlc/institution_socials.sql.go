// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution_socials.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionSocial = `-- name: CreateInstitutionSocial :one
INSERT INTO institution_socials(
  institution_id,
  link_to_social,
  social_name
) VALUES (
  $1, $2, $3
) RETURNING id, created_at, updated_at
`

type CreateInstitutionSocialParams struct {
	InstitutionID int64  `json:"institution_id"`
	LinkToSocial  string `json:"link_to_social"`
	SocialName    string `json:"social_name"`
}

type CreateInstitutionSocialRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionSocial(ctx context.Context, arg CreateInstitutionSocialParams) (CreateInstitutionSocialRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionSocial, arg.InstitutionID, arg.LinkToSocial, arg.SocialName)
	var i CreateInstitutionSocialRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionSocial = `-- name: DeleteInstitutionSocial :exec
DELETE FROM institution_socials
WHERE id = $1
`

func (q *Queries) DeleteInstitutionSocial(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionSocial, id)
	return err
}

const getInstitutionSocialByID = `-- name: GetInstitutionSocialByID :one
SELECT id, institution_id, link_to_social, social_name, created_at, updated_at
FROM institution_socials
WHERE id = $1
`

func (q *Queries) GetInstitutionSocialByID(ctx context.Context, id int64) (InstitutionSocial, error) {
	row := q.db.QueryRow(ctx, getInstitutionSocialByID, id)
	var i InstitutionSocial
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LinkToSocial,
		&i.SocialName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionSocialsByInstitutionID = `-- name: GetInstitutionSocialsByInstitutionID :many
SELECT id, institution_id, link_to_social, social_name, created_at, updated_at
FROM institution_socials
WHERE institution_id = $1
`

func (q *Queries) GetInstitutionSocialsByInstitutionID(ctx context.Context, institutionID int64) ([]InstitutionSocial, error) {
	rows, err := q.db.Query(ctx, getInstitutionSocialsByInstitutionID, institutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionSocial{}
	for rows.Next() {
		var i InstitutionSocial
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LinkToSocial,
			&i.SocialName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionSocial = `-- name: UpdateInstitutionSocial :one
UPDATE institution_socials
SET
  link_to_social = COALESCE($1, link_to_social),
  social_name = COALESCE($2, social_name),
  updated_at = now()
WHERE id = $3
RETURNING id, created_at, updated_at
`

type UpdateInstitutionSocialParams struct {
	LinkToSocial string `json:"link_to_social"`
	SocialName   string `json:"social_name"`
	ID           int64  `json:"id"`
}

type UpdateInstitutionSocialRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionSocial(ctx context.Context, arg UpdateInstitutionSocialParams) (UpdateInstitutionSocialRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionSocial, arg.LinkToSocial, arg.SocialName, arg.ID)
	var i UpdateInstitutionSocialRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
