// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: institution_magazine.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionMagazine = `-- name: CreateInstitutionMagazine :one
INSERT INTO institution_magazines(
  institution_id,
  language_code,
  magazine_name,
  link,
  link_to_rinc
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at
`

type CreateInstitutionMagazineParams struct {
	InstitutionID int64       `json:"institution_id"`
	LanguageCode  string      `json:"language_code"`
	MagazineName  string      `json:"magazine_name"`
	Link          string      `json:"link"`
	LinkToRinc    pgtype.Text `json:"link_to_rinc"`
}

type CreateInstitutionMagazineRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionMagazine(ctx context.Context, arg CreateInstitutionMagazineParams) (CreateInstitutionMagazineRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionMagazine,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.MagazineName,
		arg.Link,
		arg.LinkToRinc,
	)
	var i CreateInstitutionMagazineRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionMagazine = `-- name: DeleteInstitutionMagazine :exec
DELETE FROM institution_magazines
WHERE id = $1
`

func (q *Queries) DeleteInstitutionMagazine(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionMagazine, id)
	return err
}

const getInstitutionMagazineByID = `-- name: GetInstitutionMagazineByID :one
SELECT id, institution_id, language_code, magazine_name, link, link_to_rinc, created_at, updated_at
FROM institution_magazines
WHERE id = $1
`

func (q *Queries) GetInstitutionMagazineByID(ctx context.Context, id int64) (InstitutionMagazine, error) {
	row := q.db.QueryRow(ctx, getInstitutionMagazineByID, id)
	var i InstitutionMagazine
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.MagazineName,
		&i.Link,
		&i.LinkToRinc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionMagazinesByInstitutionIDAndLanguageCode = `-- name: GetInstitutionMagazinesByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, magazine_name, link, link_to_rinc, created_at, updated_at
FROM institution_magazines
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionMagazinesByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionMagazinesByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionMagazinesByInstitutionIDAndLanguageCodeParams) ([]InstitutionMagazine, error) {
	rows, err := q.db.Query(ctx, getInstitutionMagazinesByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionMagazine{}
	for rows.Next() {
		var i InstitutionMagazine
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.MagazineName,
			&i.Link,
			&i.LinkToRinc,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionMagazine = `-- name: UpdateInstitutionMagazine :one
UPDATE institution_magazines
SET 
  magazine_name = COALESCE($1, magazine_name),
  link = COALESCE($2, link),
  link_to_rinc = COALESCE($3, link_to_rinc),
  updated_at = now()
WHERE id = $1
RETURNING id, created_at, updated_at
`

type UpdateInstitutionMagazineParams struct {
	MagazineName string      `json:"magazine_name"`
	Link         string      `json:"link"`
	LinkToRinc   pgtype.Text `json:"link_to_rinc"`
}

type UpdateInstitutionMagazineRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionMagazine(ctx context.Context, arg UpdateInstitutionMagazineParams) (UpdateInstitutionMagazineRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionMagazine, arg.MagazineName, arg.Link, arg.LinkToRinc)
	var i UpdateInstitutionMagazineRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
