// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: institution_research_support_infrastructure.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionResearchSupportInfrastructure = `-- name: CreateInstitutionResearchSupportInfrastructure :one
INSERT INTO institution_research_support_infrastructures(
  institution_id,
  language_code,
  research_support_infrastructure_title,
  research_support_infrastructure_type,
  tin_of_legal_entity
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at
`

type CreateInstitutionResearchSupportInfrastructureParams struct {
	InstitutionID                      int64  `json:"institution_id"`
	LanguageCode                       string `json:"language_code"`
	ResearchSupportInfrastructureTitle string `json:"research_support_infrastructure_title"`
	ResearchSupportInfrastructureType  string `json:"research_support_infrastructure_type"`
	TinOfLegalEntity                   string `json:"tin_of_legal_entity"`
}

type CreateInstitutionResearchSupportInfrastructureRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionResearchSupportInfrastructure(ctx context.Context, arg CreateInstitutionResearchSupportInfrastructureParams) (CreateInstitutionResearchSupportInfrastructureRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionResearchSupportInfrastructure,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.ResearchSupportInfrastructureTitle,
		arg.ResearchSupportInfrastructureType,
		arg.TinOfLegalEntity,
	)
	var i CreateInstitutionResearchSupportInfrastructureRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionResearchSupportInfrastructure = `-- name: DeleteInstitutionResearchSupportInfrastructure :exec
DELETE FROM institution_research_support_infrastructures
WHERE id = $1
`

func (q *Queries) DeleteInstitutionResearchSupportInfrastructure(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionResearchSupportInfrastructure, id)
	return err
}

const getInstitutionResearchSupportInfrastructureByID = `-- name: GetInstitutionResearchSupportInfrastructureByID :one
SELECT id, institution_id, language_code, research_support_infrastructure_title, research_support_infrastructure_type, tin_of_legal_entity, created_at, updated_at
FROM institution_research_support_infrastructures
WHERE id = $1
`

func (q *Queries) GetInstitutionResearchSupportInfrastructureByID(ctx context.Context, id int64) (InstitutionResearchSupportInfrastructure, error) {
	row := q.db.QueryRow(ctx, getInstitutionResearchSupportInfrastructureByID, id)
	var i InstitutionResearchSupportInfrastructure
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.ResearchSupportInfrastructureTitle,
		&i.ResearchSupportInfrastructureType,
		&i.TinOfLegalEntity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionResearchSupportInfrastructuresByInstitutionIDAndLanguageCode = `-- name: GetInstitutionResearchSupportInfrastructuresByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, research_support_infrastructure_title, research_support_infrastructure_type, tin_of_legal_entity, created_at, updated_at
FROM institution_research_support_infrastructures
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionResearchSupportInfrastructuresByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionResearchSupportInfrastructuresByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionResearchSupportInfrastructuresByInstitutionIDAndLanguageCodeParams) ([]InstitutionResearchSupportInfrastructure, error) {
	rows, err := q.db.Query(ctx, getInstitutionResearchSupportInfrastructuresByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionResearchSupportInfrastructure{}
	for rows.Next() {
		var i InstitutionResearchSupportInfrastructure
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.ResearchSupportInfrastructureTitle,
			&i.ResearchSupportInfrastructureType,
			&i.TinOfLegalEntity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionResearchSupportInfrastructure = `-- name: UpdateInstitutionResearchSupportInfrastructure :one
UPDATE institution_research_support_infrastructures
SET
  research_support_infrastructure_title = COALESCE($1, research_support_infrastructure_title),
  research_support_infrastructure_type = COALESCE($2, research_support_infrastructure_type),
  tin_of_legal_entity = COALESCE($3, tin_of_legal_entity),
  updated_at = now()
WHERE id = $4
RETURNING id, created_at, updated_at
`

type UpdateInstitutionResearchSupportInfrastructureParams struct {
	ResearchSupportInfrastructureTitle string `json:"research_support_infrastructure_title"`
	ResearchSupportInfrastructureType  string `json:"research_support_infrastructure_type"`
	TinOfLegalEntity                   string `json:"tin_of_legal_entity"`
	ID                                 int64  `json:"id"`
}

type UpdateInstitutionResearchSupportInfrastructureRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionResearchSupportInfrastructure(ctx context.Context, arg UpdateInstitutionResearchSupportInfrastructureParams) (UpdateInstitutionResearchSupportInfrastructureRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionResearchSupportInfrastructure,
		arg.ResearchSupportInfrastructureTitle,
		arg.ResearchSupportInfrastructureType,
		arg.TinOfLegalEntity,
		arg.ID,
	)
	var i UpdateInstitutionResearchSupportInfrastructureRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
