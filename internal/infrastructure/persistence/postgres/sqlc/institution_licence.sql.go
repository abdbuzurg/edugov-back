// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: institution_licence.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionLicence = `-- name: CreateInstitutionLicence :one
INSERT INTO institution_licences(
  institution_id,
  language_code,
  licence_title,
  licence_type,
  link_to_file,
  given_by,
  date_start,
  date_end
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, created_at, updated_at
`

type CreateInstitutionLicenceParams struct {
	InstitutionID int64       `json:"institution_id"`
	LanguageCode  string      `json:"language_code"`
	LicenceTitle  string      `json:"licence_title"`
	LicenceType   string      `json:"licence_type"`
	LinkToFile    string      `json:"link_to_file"`
	GivenBy       string      `json:"given_by"`
	DateStart     pgtype.Date `json:"date_start"`
	DateEnd       pgtype.Date `json:"date_end"`
}

type CreateInstitutionLicenceRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionLicence(ctx context.Context, arg CreateInstitutionLicenceParams) (CreateInstitutionLicenceRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionLicence,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.LicenceTitle,
		arg.LicenceType,
		arg.LinkToFile,
		arg.GivenBy,
		arg.DateStart,
		arg.DateEnd,
	)
	var i CreateInstitutionLicenceRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionLicence = `-- name: DeleteInstitutionLicence :exec
DELETE FROM institution_licences
WHERE id = $1
`

func (q *Queries) DeleteInstitutionLicence(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionLicence, id)
	return err
}

const getInstitutionLicenceByID = `-- name: GetInstitutionLicenceByID :one
SELECT id, institution_id, language_code, licence_title, licence_type, link_to_file, given_by, date_start, date_end, created_at, updated_at
FROM institution_licences
WHERE id = $1
`

func (q *Queries) GetInstitutionLicenceByID(ctx context.Context, id int64) (InstitutionLicence, error) {
	row := q.db.QueryRow(ctx, getInstitutionLicenceByID, id)
	var i InstitutionLicence
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.LicenceTitle,
		&i.LicenceType,
		&i.LinkToFile,
		&i.GivenBy,
		&i.DateStart,
		&i.DateEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionLicencesByInstitutionIDAndLanguageCode = `-- name: GetInstitutionLicencesByInstitutionIDAndLanguageCode :many
SELECT id, institution_id, language_code, licence_title, licence_type, link_to_file, given_by, date_start, date_end, created_at, updated_at
FROM institution_licences
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionLicencesByInstitutionIDAndLanguageCodeParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionLicencesByInstitutionIDAndLanguageCode(ctx context.Context, arg GetInstitutionLicencesByInstitutionIDAndLanguageCodeParams) ([]InstitutionLicence, error) {
	rows, err := q.db.Query(ctx, getInstitutionLicencesByInstitutionIDAndLanguageCode, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionLicence{}
	for rows.Next() {
		var i InstitutionLicence
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.LicenceTitle,
			&i.LicenceType,
			&i.LinkToFile,
			&i.GivenBy,
			&i.DateStart,
			&i.DateEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionLicence = `-- name: UpdateInstitutionLicence :one
UPDATE institution_licences
SET
  licence_title = COALESCE($1, licence_title),
  licence_type = COALESCE($2, licence_type),
  link_to_file = COALESCE($3, link_to_file),
  given_by = COALESCE($4, given_by),
  date_start = COALESCE($5, date_start),
  date_end = COALESCE($6, date_end),
  updated_at = now()
WHERE id = $7
RETURNING id, created_at, updated_at
`

type UpdateInstitutionLicenceParams struct {
	LicenceTitle string      `json:"licence_title"`
	LicenceType  string      `json:"licence_type"`
	LinkToFile   string      `json:"link_to_file"`
	GivenBy      string      `json:"given_by"`
	DateStart    pgtype.Date `json:"date_start"`
	DateEnd      pgtype.Date `json:"date_end"`
	ID           int64       `json:"id"`
}

type UpdateInstitutionLicenceRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionLicence(ctx context.Context, arg UpdateInstitutionLicenceParams) (UpdateInstitutionLicenceRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionLicence,
		arg.LicenceTitle,
		arg.LicenceType,
		arg.LinkToFile,
		arg.GivenBy,
		arg.DateStart,
		arg.DateEnd,
		arg.ID,
	)
	var i UpdateInstitutionLicenceRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
