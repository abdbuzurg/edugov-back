// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: institution_main_research_direction.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstitutionMainResearchDirection = `-- name: CreateInstitutionMainResearchDirection :one
INSERT INTO institution_main_research_directions(
  institution_id,
  language_code,
  research_direction_title,
  discipline,
  area_of_research
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at
`

type CreateInstitutionMainResearchDirectionParams struct {
	InstitutionID          int64       `json:"institution_id"`
	LanguageCode           string      `json:"language_code"`
	ResearchDirectionTitle string      `json:"research_direction_title"`
	Discipline             string      `json:"discipline"`
	AreaOfResearch         pgtype.Text `json:"area_of_research"`
}

type CreateInstitutionMainResearchDirectionRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInstitutionMainResearchDirection(ctx context.Context, arg CreateInstitutionMainResearchDirectionParams) (CreateInstitutionMainResearchDirectionRow, error) {
	row := q.db.QueryRow(ctx, createInstitutionMainResearchDirection,
		arg.InstitutionID,
		arg.LanguageCode,
		arg.ResearchDirectionTitle,
		arg.Discipline,
		arg.AreaOfResearch,
	)
	var i CreateInstitutionMainResearchDirectionRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteInstitutionMainResearchDirection = `-- name: DeleteInstitutionMainResearchDirection :exec
DELETE FROM institution_main_research_directions
WHERE id = $1
`

func (q *Queries) DeleteInstitutionMainResearchDirection(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInstitutionMainResearchDirection, id)
	return err
}

const getInstitutionMainResearchDirectionByID = `-- name: GetInstitutionMainResearchDirectionByID :one
SELECT id, institution_id, language_code, research_direction_title, discipline, area_of_research, created_at, updated_at
FROM institution_main_research_directions
WHERE id = $1
`

func (q *Queries) GetInstitutionMainResearchDirectionByID(ctx context.Context, id int64) (InstitutionMainResearchDirection, error) {
	row := q.db.QueryRow(ctx, getInstitutionMainResearchDirectionByID, id)
	var i InstitutionMainResearchDirection
	err := row.Scan(
		&i.ID,
		&i.InstitutionID,
		&i.LanguageCode,
		&i.ResearchDirectionTitle,
		&i.Discipline,
		&i.AreaOfResearch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInstitutionMainResearchDirectionsByInstitutionIDAndLanguage = `-- name: GetInstitutionMainResearchDirectionsByInstitutionIDAndLanguage :many
SELECT id, institution_id, language_code, research_direction_title, discipline, area_of_research, created_at, updated_at
FROM institution_main_research_directions
WHERE institution_id = $1 AND language_code = $2
`

type GetInstitutionMainResearchDirectionsByInstitutionIDAndLanguageParams struct {
	InstitutionID int64  `json:"institution_id"`
	LanguageCode  string `json:"language_code"`
}

func (q *Queries) GetInstitutionMainResearchDirectionsByInstitutionIDAndLanguage(ctx context.Context, arg GetInstitutionMainResearchDirectionsByInstitutionIDAndLanguageParams) ([]InstitutionMainResearchDirection, error) {
	rows, err := q.db.Query(ctx, getInstitutionMainResearchDirectionsByInstitutionIDAndLanguage, arg.InstitutionID, arg.LanguageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstitutionMainResearchDirection{}
	for rows.Next() {
		var i InstitutionMainResearchDirection
		if err := rows.Scan(
			&i.ID,
			&i.InstitutionID,
			&i.LanguageCode,
			&i.ResearchDirectionTitle,
			&i.Discipline,
			&i.AreaOfResearch,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionMainResearchDirection = `-- name: UpdateInstitutionMainResearchDirection :one
UPDATE institution_main_research_directions
SET 
  research_direction_title = COALESCE($1, research_direction_title),
  discipline = COALESCE($2, discipline),
  area_of_research = COALESCE($3, area_of_research),
  updated_at = now()
WHERE id = $4
RETURNING id, created_at, updated_at
`

type UpdateInstitutionMainResearchDirectionParams struct {
	ResearchDirectionTitle string      `json:"research_direction_title"`
	Discipline             string      `json:"discipline"`
	AreaOfResearch         pgtype.Text `json:"area_of_research"`
	ID                     int64       `json:"id"`
}

type UpdateInstitutionMainResearchDirectionRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionMainResearchDirection(ctx context.Context, arg UpdateInstitutionMainResearchDirectionParams) (UpdateInstitutionMainResearchDirectionRow, error) {
	row := q.db.QueryRow(ctx, updateInstitutionMainResearchDirection,
		arg.ResearchDirectionTitle,
		arg.Discipline,
		arg.AreaOfResearch,
		arg.ID,
	)
	var i UpdateInstitutionMainResearchDirectionRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
