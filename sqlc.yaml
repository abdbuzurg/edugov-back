# sqlc.yaml at the root of your project
version: "2"
sql:
  - engine: "postgresql"
    # Schema files: Point to all *.up.sql files in your migrations directory.
    # SQLC will read these in order to build its understanding of the database schema.
    schema: "internal/infrastructure/persistence/postgres/migrations/*.up.sql"

    # Queries files: Point to all *.sql files within the 'query' directory.
    # This pattern will pick up user.sql, product.sql, etc.
    queries: "internal/infrastructure/persistence/postgres/query/*.sql"
    gen:
      go:
        # Output directory for the generated Go code
        out: "internal/infrastructure/persistence/postgres/sqlc"
        # Package name for the generated Go code
        package: "sqlc"
        # Optional: Emit interface for the generated `Queries` struct.
        # This can be useful for mocking in tests.
        emit_interface: true
        # Optional: Emit exact table names. If false, it tries to singularize table names.
        # Keeping it true can prevent unexpected naming.
        emit_exact_table_names: false
        # Optional: Emit empty slice for no rows. If false, it returns nil.
        # Often preferred for consistent behavior with empty results.
        emit_empty_slices: true
        # Optional: Tags for JSON marshaling in generated models.
        emit_json_tags: true
        # Optional: Use `sql.Null*` types for nullable columns.
        # Recommended for handling NULL values gracefully.
        sql_package: "pgx/v5" # or "database/sql" if not using pgx
